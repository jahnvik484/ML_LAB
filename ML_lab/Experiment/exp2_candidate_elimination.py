# -*- coding: utf-8 -*-
"""exp2_Candidate_Elimination.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8T2UVlXhRQ0KkslPuk6QB9KhR7zjIWA
"""

from google.colab import files
uploaded =files.upload()

import pandas as pd
import numpy as np

df=pd.read_csv('dataset.csv')

df

df.describe()

df.info()

df.shape

y=df["isplay"]

X=df.drop(columns=["isplay"])

X

y

type(X)

type(y)

X=np.array(X)

y=np.array(y)

def candidate_elimination(X, y):
    # Initialize the specific hypothesis (S) and general hypothesis (G)
    num_attributes = len(X[0])
    S = ['ϕ'] * num_attributes  # Most specific hypothesis
    G = [['?'] * num_attributes]  # Most general hypothesis

    # Iterate through the dataset
    for i, instance in enumerate(X):
        if y[i] == 'yes':  # Positive example
            # Update S to be consistent with the instance
            for j in range(num_attributes):
                if S[j] == 'ϕ':  # Replace 'ϕ' with the attribute value
                    S[j] = instance[j]
                elif S[j] != instance[j]:  # Generalize to '?'
                    S[j] = '?'

            # Remove inconsistent hypotheses from G
            G = [g for g in G if all(
                g[k] == '?' or S[k] == '?' or g[k] == S[k]
                for k in range(num_attributes)
            )]

        elif y[i] == 'no':  # Negative example
            # Specialize G to exclude the negative instance
            new_G = []
            for g in G:
                for j in range(num_attributes):
                    if g[j] == '?':  # Specialize this attribute
                        if S[j] != '?':
                            new_hypothesis = g.copy()
                            new_hypothesis[j] = S[j]
                            new_G.append(new_hypothesis)
            G = new_G

            # Remove inconsistent hypotheses from G
            G = [g for g in G if any(
                g[k] != instance[k] and g[k] != '?' for k in range(num_attributes)
            )]

    return S, G

S_final, G_final = candidate_elimination(X, y)

# Output results
print("Final Specific Hypothesis:", S_final)
print("Final General Hypothesis:", G_final)