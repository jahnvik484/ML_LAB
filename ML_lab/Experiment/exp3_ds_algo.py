# -*- coding: utf-8 -*-
"""Exp2_DS_Algo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VHE-OiRnLTZk1leqisCthbzXqcnFvDwC
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('car_evaluation.csv')

df

print(df.shape)
print(df.head())

col_name = ['buying','maint','doors','persons','lug_boot','safety','class']
df.columns = col_name

df

df.info()
df.describe()

for col in col_name:
  print(df[col].value_counts())

print(df)
  for col in col_name:
    print(col);
    a=df[col].value_counts()
    a.plot(kind='bar')
    plt.show()

X = df.drop(['class'],axis=1)
Y = df['class']

X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.33, random_state = 42)

X_train.shape, X_test.shape
X_train.dtypes

!pip install category_encoders

import category_encoders as ce

encoder = ce.OrdinalEncoder(cols=['buying','maint','doors','persons','lug_boot','safety'])
X_train = encoder.fit_transform(X_train)
X_test = encoder.transform(X_test)

from sklearn.tree import DecisionTreeClassifier

clf_gini = DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=0)
clf_gini.fit(X_train,y_train)

y_pred_gini = clf_gini.predict(X_test)

from sklearn.metrics import accuracy_score
print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))

y_pred_train_gini = clf_gini.predict(X_train)
y_pred_train_gini

print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train_gini)))

print('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))

print('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))

plt.figure(figsize=(12,8))

from sklearn import tree
tree.plot_tree(clf_gini.fit(X_train, y_train))

import graphviz
dot_data = tree.export_graphviz(clf_gini, out_file=None,
                              feature_names=X_train.columns,
                              class_names=y_train,
                              filled=True, rounded=True,
                              special_characters=True)

graph = graphviz.Source(dot_data)

graph

clf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)

clf_en.fit(X_train, y_train)
